version: '3.9'

services:
  postgres:
    container_name: postgres
    image: 'postgres:14.2'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
    ports:
      - '5432:5432'
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang_microservices

  mongodb:
    container_name: mongodb
    image: 'mongo:4.2.6-bionic'
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang_microservices
    
  auth-service:
    container_name: auth-service
    image: guillesaez15/golang_microservices_auth:latest
    build:
      context: ./auth-service
      dockerfile: auth-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang_microservices
    environment:
      DSN: 'host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5'

  front-end-service:
    container_name: front-end-service
    image: guillesaez15/golang_microservices_front_end:latest
    build:
      context: ./front-end
      dockerfile: front-end-service.dockerfile
    restart: always
    ports:
      - '81:80'
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang_microservices

  broker-service:
    container_name: broker-service
    image: guillesaez15/golang_microservices_broker:latest
    build:
      context: ./broker-service
      dockerfile: broker-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - '82:3000'
    networks:
      - golang_microservices

  logger-service:
    container_name: logger-service
    image: guillesaez15/golang_microservices_logger:latest
    build:
      context: ./logger-service
      dockerfile: logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang_microservices

networks:
  golang_microservices:
    driver: bridge
